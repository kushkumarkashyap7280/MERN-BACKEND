// // here we see  epxress which making server under the hood and req and res and its most common properites in details check readme

// console.log("our first basic fullstack in mern");

// import express from "express";
// const port = 3000;
// const app = express();


// app.get('/', (req, res) => {
//      // open  http://localhost:3000/ in browser
//      // and see terminal 
//     console.log("==================== req is =======================",req);
//     // out put :

// //     our first basic fullstack in mern
// // Example app listening on port 3000
// // ==================== req is ======================= <ref *2> IncomingMessage {
// //   _events: {
// //     close: undefined,
// //     error: undefined,
// //     data: undefined,
// //     end: undefined,
// //     readable: undefined
// //   },
// //   _readableState: ReadableState {
// //     highWaterMark: 16384,
// //     buffer: [],
// //     bufferIndex: 0,
// //     length: 0,
// //     pipes: [],
// //     awaitDrainWriters: null,
// //     [Symbol(kState)]: 1315084
// //   },
// //   _maxListeners: undefined,
// //   socket: <ref *1> Socket {
// //     connecting: false,
// //     _hadError: false,
// //     _parent: null,
// //     _host: null,
// //     _closeAfterHandlingError: false,
// //     _events: {
// //       close: [Array],
// //       error: [Function: socketOnError],
// //       prefinish: undefined,
// //       finish: undefined,
// //       drain: [Function: bound socketOnDrain],
// //       data: [Function: bound socketOnData],
// //       end: [Array],
// //       readable: undefined,
// //       timeout: [Function: socketOnTimeout],
// //       resume: [Function: onSocketResume],
// //       pause: [Function: onSocketPause]
// //     },
// //     _readableState: ReadableState {
// //       highWaterMark: 16384,
// //       buffer: [],
// //       bufferIndex: 0,
// //       length: 0,
// //       pipes: [],
// //       awaitDrainWriters: null,
// //       [Symbol(kState)]: 193997060
// //     },
// //     _writableState: WritableState {
// //       highWaterMark: 16384,
// //       length: 0,
// //       corked: 0,
// //       onwrite: [Function: bound onwrite],
// //       writelen: 0,
// //       bufferedIndex: 0,
// //       pendingcb: 1,
// //       [Symbol(kState)]: 420217092,
// //       [Symbol(kBufferedValue)]: null,
// //       [Symbol(kWriteCbValue)]: null,
// //       [Symbol(kAfterWriteTickInfoValue)]: [Object]
// //     },
// //     allowHalfOpen: true,
// //     _maxListeners: undefined,
// //     _eventsCount: 8,
// //     _sockname: null,
// //     _pendingData: null,
// //     _pendingEncoding: '',
// //     server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 60144,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     _server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 60144,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     parser: HTTPParser {
// //       '0': null,
// //       '1': [Function: parserOnHeaders],
// //       '2': [Function: parserOnHeadersComplete],
// //       '3': [Function: parserOnBody],
// //       '4': [Function: parserOnMessageComplete],
// //       '5': [Function: bound onParserExecute],
// //       '6': [Function: bound onParserTimeout],
// //       _headers: [],
// //       _url: '',
// //       socket: [Circular *1],
// //       incoming: [Circular *2],
// //       outgoing: null,
// //       maxHeaderPairs: 2000,
// //       _consumed: true,
// //       onIncoming: [Function: bound parserOnIncoming],
// //       joinDuplicateHeaders: null,
// //       [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
// //     },
// //     on: [Function: socketListenerWrap],
// //     addListener: [Function: socketListenerWrap],
// //     prependListener: [Function: socketListenerWrap],
// //     setEncoding: [Function: socketSetEncoding],
// //     _paused: false,
// //     _httpMessage: ServerResponse {
// //       _events: [Object: null prototype],
// //       _eventsCount: 1,
// //       _maxListeners: undefined,
// //       outputData: [],
// //       outputSize: 0,
// //       writable: true,
// //       destroyed: false,
// //       _last: false,
// //       chunkedEncoding: false,
// //       shouldKeepAlive: true,
// //       maxRequestsOnConnectionReached: false,
// //       _defaultKeepAlive: true,
// //       useChunkedEncodingByDefault: true,
// //       sendDate: true,
// //       _removedConnection: false,
// //       _removedContLen: false,
// //       _removedTE: false,
// //       strictContentLength: false,
// //       _contentLength: '41',
// //       _hasBody: true,
// //       _trailer: '',
// //       finished: true,
// //       _headerSent: true,
// //       _closed: false,
// //       _header: 'HTTP/1.1 200 OK\r\n' +
// //         'X-Powered-By: Express\r\n' +
// //         'Content-Type: text/html; charset=utf-8\r\n' +
// //         'Content-Length: 41\r\n' +
// //         'ETag: W/"29-soYe+gZ2bsrBYZaqf9Hu1o5Q9uU"\r\n' +
// //         'Date: Sun, 10 Aug 2025 04:47:54 GMT\r\n' +
// //         'Connection: keep-alive\r\n' +
// //         'Keep-Alive: timeout=5\r\n' +
// //         '\r\n',
// //       _keepAliveTimeout: 5000,
// //       _onPendingData: [Function: bound updateOutgoingData],
// //       req: [Circular *2],
// //       _sent100: false,
// //       _expect_continue: false,
// //       _maxRequestsPerSocket: 0,
// //       locals: [Object: null prototype] {},
// //       statusMessage: 'OK',
// //       statusCode: 200,
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(kBytesWritten)]: 0,
// //       [Symbol(kNeedDrain)]: false,
// //       [Symbol(corked)]: 0,
// //       [Symbol(kChunkedBuffer)]: [],
// //       [Symbol(kChunkedLength)]: 0,
// //       [Symbol(kSocket)]: [Circular *1],
// //       [Symbol(kOutHeaders)]: [Object: null prototype],
// //       [Symbol(errored)]: null,
// //       [Symbol(kHighWaterMark)]: 16384,
// //       [Symbol(kRejectNonStandardBodyWrites)]: false,
// //       [Symbol(kUniqueHeaders)]: null
// //     },
// //     [Symbol(async_id_symbol)]: 20,
// //     [Symbol(kHandle)]: TCP {
// //       reading: true,
// //       onconnection: null,
// //       _consumed: true,
// //       [Symbol(owner_symbol)]: [Circular *1]
// //     },
// //     [Symbol(lastWriteQueueSize)]: 0,
// //     [Symbol(timeout)]: null,
// //     [Symbol(kBuffer)]: null,
// //     [Symbol(kBufferCb)]: null,
// //     [Symbol(kBufferGen)]: null,
// //     [Symbol(shapeMode)]: true,
// //     [Symbol(kCapture)]: false,
// //     [Symbol(kSetNoDelay)]: true,
// //     [Symbol(kSetKeepAlive)]: false,
// //     [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //     [Symbol(kBytesRead)]: 0,
// //     [Symbol(kBytesWritten)]: 0
// //   },
// //   httpVersionMajor: 1,
// //   httpVersionMinor: 1,
// //   httpVersion: '1.1',
// //   complete: false,
// //   rawHeaders: [
// //     'Host',
// //     'localhost:3000',
// //     'Connection',
// //     'keep-alive',
// //     'sec-ch-ua',
// //     '"Not;A=Brand";v="99", "Brave";v="139", "Chromium";v="139"',
// //     'sec-ch-ua-mobile',
// //     '?0',
// //     'sec-ch-ua-platform',
// //     '"Windows"',
// //     'Upgrade-Insecure-Requests',
// //     '1',
// //     'User-Agent',
// //     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',     
// //     'Accept',
// //     'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
// //     'Sec-GPC',
// //     '1',
// //     'Accept-Language',
// //     'en-US,en;q=0.5',
// //     'Sec-Fetch-Site',
// //     'none',
// //     'Sec-Fetch-Mode',
// //     'navigate',
// //     'Sec-Fetch-User',
// //     '?1',
// //     'Sec-Fetch-Dest',
// //     'document',
// //     'Accept-Encoding',
// //     'gzip, deflate, br, zstd'
// //   ],
// //   rawTrailers: [],
// //   joinDuplicateHeaders: null,
// //   aborted: false,
// //   upgrade: false,
// //   url: '/',
// //   method: 'GET',
// //   statusCode: null,
// //   statusMessage: null,
// //   client: <ref *1> Socket {
// //     connecting: false,
// //     _hadError: false,
// //     _parent: null,
// //     _host: null,
// //     _closeAfterHandlingError: false,
// //     _events: {
// //       close: [Array],
// //       error: [Function: socketOnError],
// //       prefinish: undefined,
// //       finish: undefined,
// //       drain: [Function: bound socketOnDrain],
// //       data: [Function: bound socketOnData],
// //       end: [Array],
// //       readable: undefined,
// //       timeout: [Function: socketOnTimeout],
// //       resume: [Function: onSocketResume],
// //       pause: [Function: onSocketPause]
// //     },
// //     _readableState: ReadableState {
// //       highWaterMark: 16384,
// //       buffer: [],
// //       bufferIndex: 0,
// //       length: 0,
// //       pipes: [],
// //       awaitDrainWriters: null,
// //       [Symbol(kState)]: 193997060
// //     },
// //     _writableState: WritableState {
// //       highWaterMark: 16384,
// //       length: 0,
// //       corked: 0,
// //       onwrite: [Function: bound onwrite],
// //       writelen: 0,
// //       bufferedIndex: 0,
// //       pendingcb: 1,
// //       [Symbol(kState)]: 420217092,
// //       [Symbol(kBufferedValue)]: null,
// //       [Symbol(kWriteCbValue)]: null,
// //       [Symbol(kAfterWriteTickInfoValue)]: [Object]
// //     },
// //     allowHalfOpen: true,
// //     _maxListeners: undefined,
// //     _eventsCount: 8,
// //     _sockname: null,
// //     _pendingData: null,
// //     _pendingEncoding: '',
// //     server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 60144,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     _server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 60144,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     parser: HTTPParser {
// //       '0': null,
// //       '1': [Function: parserOnHeaders],
// //       '2': [Function: parserOnHeadersComplete],
// //       '3': [Function: parserOnBody],
// //       '4': [Function: parserOnMessageComplete],
// //       '5': [Function: bound onParserExecute],
// //       '6': [Function: bound onParserTimeout],
// //       _headers: [],
// //       _url: '',
// //       socket: [Circular *1],
// //       incoming: [Circular *2],
// //       outgoing: null,
// //       maxHeaderPairs: 2000,
// //       _consumed: true,
// //       onIncoming: [Function: bound parserOnIncoming],
// //       joinDuplicateHeaders: null,
// //       [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
// //     },
// //     on: [Function: socketListenerWrap],
// //     addListener: [Function: socketListenerWrap],
// //     prependListener: [Function: socketListenerWrap],
// //     setEncoding: [Function: socketSetEncoding],
// //     _paused: false,
// //     _httpMessage: ServerResponse {
// //       _events: [Object: null prototype],
// //       _eventsCount: 1,
// //       _maxListeners: undefined,
// //       outputData: [],
// //       outputSize: 0,
// //       writable: true,
// //       destroyed: false,
// //       _last: false,
// //       chunkedEncoding: false,
// //       shouldKeepAlive: true,
// //       maxRequestsOnConnectionReached: false,
// //       _defaultKeepAlive: true,
// //       useChunkedEncodingByDefault: true,
// //       sendDate: true,
// //       _removedConnection: false,
// //       _removedContLen: false,
// //       _removedTE: false,
// //       strictContentLength: false,
// //       _contentLength: '41',
// //       _hasBody: true,
// //       _trailer: '',
// //       finished: true,
// //       _headerSent: true,
// //       _closed: false,
// //       _header: 'HTTP/1.1 200 OK\r\n' +
// //         'X-Powered-By: Express\r\n' +
// //         'Content-Type: text/html; charset=utf-8\r\n' +
// //         'Content-Length: 41\r\n' +
// //         'ETag: W/"29-soYe+gZ2bsrBYZaqf9Hu1o5Q9uU"\r\n' +
// //         'Date: Sun, 10 Aug 2025 04:47:54 GMT\r\n' +
// //         'Connection: keep-alive\r\n' +
// //         'Keep-Alive: timeout=5\r\n' +
// //         '\r\n',
// //       _keepAliveTimeout: 5000,
// //       _onPendingData: [Function: bound updateOutgoingData],
// //       req: [Circular *2],
// //       _sent100: false,
// //       _expect_continue: false,
// //       _maxRequestsPerSocket: 0,
// //       locals: [Object: null prototype] {},
// //       statusMessage: 'OK',
// //       statusCode: 200,
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(kBytesWritten)]: 0,
// //       [Symbol(kNeedDrain)]: false,
// //       [Symbol(corked)]: 0,
// //       [Symbol(kChunkedBuffer)]: [],
// //       [Symbol(kChunkedLength)]: 0,
// //       [Symbol(kSocket)]: [Circular *1],
// //       [Symbol(kOutHeaders)]: [Object: null prototype],
// //       [Symbol(errored)]: null,
// //       [Symbol(kHighWaterMark)]: 16384,
// //       [Symbol(kRejectNonStandardBodyWrites)]: false,
// //       [Symbol(kUniqueHeaders)]: null
// //     },
// //     [Symbol(async_id_symbol)]: 20,
// //     [Symbol(kHandle)]: TCP {
// //       reading: true,
// //       onconnection: null,
// //       _consumed: true,
// //       [Symbol(owner_symbol)]: [Circular *1]
// //     },
// //     [Symbol(lastWriteQueueSize)]: 0,
// //     [Symbol(timeout)]: null,
// //     [Symbol(kBuffer)]: null,
// //     [Symbol(kBufferCb)]: null,
// //     [Symbol(kBufferGen)]: null,
// //     [Symbol(shapeMode)]: true,
// //     [Symbol(kCapture)]: false,
// //     [Symbol(kSetNoDelay)]: true,
// //     [Symbol(kSetKeepAlive)]: false,
// //     [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //     [Symbol(kBytesRead)]: 0,
// //     [Symbol(kBytesWritten)]: 0
// //   },
// //   _consuming: false,
// //   _dumped: false,
// //   res: <ref *3> ServerResponse {
// //     _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
// //     _eventsCount: 1,
// //     _maxListeners: undefined,
// //     outputData: [],
// //     outputSize: 0,
// //     writable: true,
// //     destroyed: false,
// //     _last: false,
// //     chunkedEncoding: false,
// //     shouldKeepAlive: true,
// //     maxRequestsOnConnectionReached: false,
// //     _defaultKeepAlive: true,
// //     useChunkedEncodingByDefault: true,
// //     sendDate: true,
// //     _removedConnection: false,
// //     _removedContLen: false,
// //     _removedTE: false,
// //     strictContentLength: false,
// //     _contentLength: '41',
// //     _hasBody: true,
// //     _trailer: '',
// //     finished: true,
// //     _headerSent: true,
// //     _closed: false,
// //     _header: 'HTTP/1.1 200 OK\r\n' +
// //       'X-Powered-By: Express\r\n' +
// //       'Content-Type: text/html; charset=utf-8\r\n' +
// //       'Content-Length: 41\r\n' +
// //       'ETag: W/"29-soYe+gZ2bsrBYZaqf9Hu1o5Q9uU"\r\n' +
// //       'Date: Sun, 10 Aug 2025 04:47:54 GMT\r\n' +
// //       'Connection: keep-alive\r\n' +
// //       'Keep-Alive: timeout=5\r\n' +
// //       '\r\n',
// //     _keepAliveTimeout: 5000,
// //     _onPendingData: [Function: bound updateOutgoingData],
// //     req: [Circular *2],
// //     _sent100: false,
// //     _expect_continue: false,
// //     _maxRequestsPerSocket: 0,
// //     locals: [Object: null prototype] {},
// //     statusMessage: 'OK',
// //     statusCode: 200,
// //     [Symbol(shapeMode)]: false,
// //     [Symbol(kCapture)]: false,
// //     [Symbol(kBytesWritten)]: 0,
// //     [Symbol(kNeedDrain)]: false,
// //     [Symbol(corked)]: 0,
// //     [Symbol(kChunkedBuffer)]: [],
// //     [Symbol(kChunkedLength)]: 0,
// //     [Symbol(kSocket)]: <ref *1> Socket {
// //       connecting: false,
// //       _hadError: false,
// //       _parent: null,
// //       _host: null,
// //       _closeAfterHandlingError: false,
// //       _events: [Object],
// //       _readableState: [ReadableState],
// //       _writableState: [WritableState],
// //       allowHalfOpen: true,
// //       _maxListeners: undefined,
// //       _eventsCount: 8,
// //       _sockname: null,
// //       _pendingData: null,
// //       _pendingEncoding: '',
// //       server: [Server],
// //       _server: [Server],
// //       parser: [HTTPParser],
// //       on: [Function: socketListenerWrap],
// //       addListener: [Function: socketListenerWrap],
// //       prependListener: [Function: socketListenerWrap],
// //       setEncoding: [Function: socketSetEncoding],
// //       _paused: false,
// //       _httpMessage: [Circular *3],
// //       [Symbol(async_id_symbol)]: 20,
// //       [Symbol(kHandle)]: [TCP],
// //       [Symbol(lastWriteQueueSize)]: 0,
// //       [Symbol(timeout)]: null,
// //       [Symbol(kBuffer)]: null,
// //       [Symbol(kBufferCb)]: null,
// //       [Symbol(kBufferGen)]: null,
// //       [Symbol(shapeMode)]: true,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(kSetNoDelay)]: true,
// //       [Symbol(kSetKeepAlive)]: false,
// //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //       [Symbol(kBytesRead)]: 0,
// //       [Symbol(kBytesWritten)]: 0
// //     },
// //     [Symbol(kOutHeaders)]: [Object: null prototype] {
// //       'x-powered-by': [Array],
// //       'content-type': [Array],
// //       'content-length': [Array],
// //       etag: [Array]
// //     },
// //     [Symbol(errored)]: null,
// //     [Symbol(kHighWaterMark)]: 16384,
// //     [Symbol(kRejectNonStandardBodyWrites)]: false,
// //     [Symbol(kUniqueHeaders)]: null
// //   },
// //   next: [Function: next],
// //   baseUrl: '',
// //   originalUrl: '/',
// //   _parsedUrl: Url {
// //     protocol: null,
// //     slashes: null,
// //     auth: null,
// //     host: null,
// //     port: null,
// //     hostname: null,
// //     hash: null,
// //     search: null,
// //     query: null,
// //     pathname: '/',
// //     path: '/',
// //     href: '/',
// //     _raw: '/'
// //   },
// //   route: Route {
// //     path: '/',
// //     stack: [ [Layer] ],
// //     methods: [Object: null prototype] { get: true }
// //   },
// //   params: [Object: null prototype] {},
// //   [Symbol(shapeMode)]: true,
// //   [Symbol(kCapture)]: false,
// //   [Symbol(kHeaders)]: {
// //     host: 'localhost:3000',
// //     connection: 'keep-alive',
// //     'sec-ch-ua': '"Not;A=Brand";v="99", "Brave";v="139", "Chromium";v="139"',
// //     'sec-ch-ua-mobile': '?0',
// //     'sec-ch-ua-platform': '"Windows"',
// //     'upgrade-insecure-requests': '1',
// //     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
// //     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
// //     'sec-gpc': '1',
// //     'accept-language': 'en-US,en;q=0.5',
// //     'sec-fetch-site': 'none',
// //     'sec-fetch-mode': 'navigate',
// //     'sec-fetch-user': '?1',
// //     'sec-fetch-dest': 'document',
// //     'accept-encoding': 'gzip, deflate, br, zstd'
// //   },
// //   [Symbol(kHeadersCount)]: 30,
// //   [Symbol(kTrailers)]: null,
// //   [Symbol(kTrailersCount)]: 0
// // }
  
// console.log("========= response ==========" ,res);
// // // out put : 
// // /*
// // ========= response ========== <ref *1> ServerResponse {
// //   _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
// //   _eventsCount: 1,
// //   _maxListeners: undefined,
// //   outputData: [],
// //   outputSize: 0,
// //   writable: true,
// //   destroyed: false,
// //   _last: false,
// //   chunkedEncoding: false,
// //   shouldKeepAlive: true,
// //   maxRequestsOnConnectionReached: false,
// //   _defaultKeepAlive: true,
// //   useChunkedEncodingByDefault: true,
// //   sendDate: true,
// //   _removedConnection: false,
// //   _removedContLen: false,
// //   _removedTE: false,
// //   strictContentLength: false,
// //   _contentLength: null,
// //   _hasBody: true,
// //   _trailer: '',
// //   finished: false,
// //   _headerSent: false,
// //   _closed: false,
// //   _header: null,
// //   _keepAliveTimeout: 5000,
// //   _onPendingData: [Function: bound updateOutgoingData],
// //   req: IncomingMessage {
// //     _events: {
// //       close: undefined,
// //       error: undefined,
// //       data: undefined,
// //       end: undefined,
// //       readable: undefined
// //     },
// //     _readableState: ReadableState {
// //       highWaterMark: 16384,
// //       buffer: [],
// //       bufferIndex: 0,
// //       length: 0,
// //       pipes: [],
// //       awaitDrainWriters: null,
// //       [Symbol(kState)]: 1315084
// //     },
// //     _maxListeners: undefined,
// //     socket: Socket {
// //       connecting: false,
// //       _hadError: false,
// //       _parent: null,
// //       _host: null,
// //       _closeAfterHandlingError: false,
// //       _events: [Object],
// //       _readableState: [ReadableState],
// //       _writableState: [WritableState],
// //       allowHalfOpen: true,
// //       _maxListeners: undefined,
// //       _eventsCount: 8,
// //       _sockname: null,
// //       _pendingData: null,
// //       _pendingEncoding: '',
// //       server: [Server],
// //       _server: [Server],
// //       parser: [HTTPParser],
// //       on: [Function: socketListenerWrap],
// //       addListener: [Function: socketListenerWrap],
// //       prependListener: [Function: socketListenerWrap],
// //       setEncoding: [Function: socketSetEncoding],
// //       _paused: false,
// //       _httpMessage: [Circular *1],
// //       [Symbol(async_id_symbol)]: 20,
// //       [Symbol(kHandle)]: [TCP],
// //       [Symbol(lastWriteQueueSize)]: 0,
// //       [Symbol(timeout)]: null,
// //       [Symbol(kBuffer)]: null,
// //       [Symbol(kBufferCb)]: null,
// //       [Symbol(kBufferGen)]: null,
// //       [Symbol(shapeMode)]: true,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(kSetNoDelay)]: true,
// //       [Symbol(kSetKeepAlive)]: false,
// //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //       [Symbol(kBytesRead)]: 0,
// //       [Symbol(kBytesWritten)]: 0
// //     },
// //     httpVersionMajor: 1,
// //     httpVersionMinor: 1,
// //     httpVersion: '1.1',
// //     complete: false,
// //     rawHeaders: [
// //       'Host',
// //       'localhost:3000',
// //       'Connection',
// //       'keep-alive',
// //       'Cache-Control',
// //       'max-age=0',
// //       'sec-ch-ua',
// //       '"Not;A=Brand";v="99", "Brave";v="139", "Chromium";v="139"',
// //       'sec-ch-ua-mobile',
// //       '?0',
// //       'sec-ch-ua-platform',
// //       '"Windows"',
// //       'Upgrade-Insecure-Requests',
// //       '1',
// //       'User-Agent',
// //       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',   
// //       'Accept',
// //       'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
// //       'Sec-GPC',
// //       '1',
// //       'Accept-Language',
// //       'en-US,en;q=0.5',
// //       'Sec-Fetch-Site',
// //       'none',
// //       'Sec-Fetch-Mode',
// //       'navigate',
// //       'Sec-Fetch-User',
// //       '?1',
// //       'Sec-Fetch-Dest',
// //       'document',
// //       'Accept-Encoding',
// //       'gzip, deflate, br, zstd',
// //       'If-None-Match',
// //       'W/"29-soYe+gZ2bsrBYZaqf9Hu1o5Q9uU"'
// //     ],
// //     rawTrailers: [],
// //     joinDuplicateHeaders: null,
// //     aborted: false,
// //     upgrade: false,
// //     url: '/',
// //     method: 'GET',
// //     statusCode: null,
// //     statusMessage: null,
// //     client: Socket {
// //       connecting: false,
// //       _hadError: false,
// //       _parent: null,
// //       _host: null,
// //       _closeAfterHandlingError: false,
// //       _events: [Object],
// //       _readableState: [ReadableState],
// //       _writableState: [WritableState],
// //       allowHalfOpen: true,
// //       _maxListeners: undefined,
// //       _eventsCount: 8,
// //       _sockname: null,
// //       _pendingData: null,
// //       _pendingEncoding: '',
// //       server: [Server],
// //       _server: [Server],
// //       parser: [HTTPParser],
// //       on: [Function: socketListenerWrap],
// //       addListener: [Function: socketListenerWrap],
// //       prependListener: [Function: socketListenerWrap],
// //       setEncoding: [Function: socketSetEncoding],
// //       _paused: false,
// //       _httpMessage: [Circular *1],
// //       [Symbol(async_id_symbol)]: 20,
// //       [Symbol(kHandle)]: [TCP],
// //       [Symbol(lastWriteQueueSize)]: 0,
// //       [Symbol(timeout)]: null,
// //       [Symbol(kBuffer)]: null,
// //       [Symbol(kBufferCb)]: null,
// //       [Symbol(kBufferGen)]: null,
// //       [Symbol(shapeMode)]: true,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(kSetNoDelay)]: true,
// //       [Symbol(kSetKeepAlive)]: false,
// //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //       [Symbol(kBytesRead)]: 0,
// //       [Symbol(kBytesWritten)]: 0
// //     },
// //     _consuming: false,
// //     _dumped: false,
// //     res: [Circular *1],
// //     next: [Function: next],
// //     baseUrl: '',
// //     originalUrl: '/',
// //     _parsedUrl: Url {
// //       protocol: null,
// //       slashes: null,
// //       auth: null,
// //       host: null,
// //       port: null,
// //       hostname: null,
// //       hash: null,
// //       search: null,
// //       query: null,
// //       pathname: '/',
// //       path: '/',
// //       href: '/',
// //       _raw: '/'
// //     },
// //     route: Route {
// //       path: '/',
// //       stack: [Array],
// //       methods: [Object: null prototype]
// //     },
// //     params: [Object: null prototype] {},
// //     [Symbol(shapeMode)]: true,
// //     [Symbol(kCapture)]: false,
// //     [Symbol(kHeaders)]: {
// //       host: 'localhost:3000',
// //       connection: 'keep-alive',
// //       'cache-control': 'max-age=0',
// //       'sec-ch-ua': '"Not;A=Brand";v="99", "Brave";v="139", "Chromium";v="139"',
// //       'sec-ch-ua-mobile': '?0',
// //       'sec-ch-ua-platform': '"Windows"',
// //       'upgrade-insecure-requests': '1',
// //       'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36',
// //       accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
// //       'sec-gpc': '1',
// //       'accept-language': 'en-US,en;q=0.5',
// //       'sec-fetch-site': 'none',
// //       'sec-fetch-mode': 'navigate',
// //       'sec-fetch-user': '?1',
// //       'sec-fetch-dest': 'document',
// //       'accept-encoding': 'gzip, deflate, br, zstd',
// //       'if-none-match': 'W/"29-soYe+gZ2bsrBYZaqf9Hu1o5Q9uU"'
// //     },
// //     [Symbol(kHeadersCount)]: 34,
// //     [Symbol(kTrailers)]: null,
// //     [Symbol(kTrailersCount)]: 0
// //   },
// //   _sent100: false,
// //   _expect_continue: false,
// //   _maxRequestsPerSocket: 0,
// //   locals: [Object: null prototype] {},
// //   [Symbol(shapeMode)]: false,
// //   [Symbol(kCapture)]: false,
// //   [Symbol(kBytesWritten)]: 0,
// //   [Symbol(kNeedDrain)]: false,
// //   [Symbol(corked)]: 0,
// //   [Symbol(kChunkedBuffer)]: [],
// //   [Symbol(kChunkedLength)]: 0,
// //   [Symbol(kSocket)]: <ref *2> Socket {
// //     connecting: false,
// //     _hadError: false,
// //     _parent: null,
// //     _host: null,
// //     _closeAfterHandlingError: false,
// //     _events: {
// //       close: [Array],
// //       error: [Function: socketOnError],
// //       prefinish: undefined,
// //       finish: undefined,
// //       drain: [Function: bound socketOnDrain],
// //       data: [Function: bound socketOnData],
// //       end: [Array],
// //       readable: undefined,
// //       timeout: [Function: socketOnTimeout],
// //       resume: [Function: onSocketResume],
// //       pause: [Function: onSocketPause]
// //     },
// //     _readableState: ReadableState {
// //       highWaterMark: 16384,
// //       buffer: [],
// //       bufferIndex: 0,
// //       length: 0,
// //       pipes: [],
// //       awaitDrainWriters: null,
// //       [Symbol(kState)]: 193997060
// //     },
// //     _writableState: WritableState {
// //       highWaterMark: 16384,
// //       length: 0,
// //       corked: 0,
// //       onwrite: [Function: bound onwrite],
// //       writelen: 0,
// //       bufferedIndex: 0,
// //       pendingcb: 0,
// //       [Symbol(kState)]: 17564420,
// //       [Symbol(kBufferedValue)]: null
// //     },
// //     allowHalfOpen: true,
// //     _maxListeners: undefined,
// //     _eventsCount: 8,
// //     _sockname: null,
// //     _pendingData: null,
// //     _pendingEncoding: '',
// //     server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 230,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     _server: Server {
// //       maxHeaderSize: undefined,
// //       insecureHTTPParser: undefined,
// //       requestTimeout: 300000,
// //       headersTimeout: 60000,
// //       keepAliveTimeout: 5000,
// //       connectionsCheckingInterval: 30000,
// //       requireHostHeader: true,
// //       joinDuplicateHeaders: undefined,
// //       rejectNonStandardBodyWrites: false,
// //       _events: [Object: null prototype],
// //       _eventsCount: 4,
// //       _maxListeners: undefined,
// //       _connections: 1,
// //       _handle: [TCP],
// //       _usingWorkers: false,
// //       _workers: [],
// //       _unref: false,
// //       _listeningId: 2,
// //       allowHalfOpen: true,
// //       pauseOnConnect: false,
// //       noDelay: true,
// //       keepAlive: false,
// //       keepAliveInitialDelay: 0,
// //       highWaterMark: 16384,
// //       httpAllowHalfOpen: false,
// //       timeout: 0,
// //       maxHeadersCount: null,
// //       maxRequestsPerSocket: 0,
// //       _connectionKey: '6::::3000',
// //       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
// //       [Symbol(ServerResponse)]: [Function: ServerResponse],
// //       [Symbol(shapeMode)]: false,
// //       [Symbol(kCapture)]: false,
// //       [Symbol(async_id_symbol)]: 16,
// //       [Symbol(kUniqueHeaders)]: null,
// //       [Symbol(http.server.connections)]: ConnectionsList {},
// //       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
// //         _idleTimeout: 30000,
// //         _idlePrev: [TimersList],
// //         _idleNext: [TimersList],
// //         _idleStart: 230,
// //         _onTimeout: [Function: bound checkConnections],
// //         _timerArgs: undefined,
// //         _repeat: 30000,
// //         _destroyed: false,
// //         [Symbol(refed)]: false,
// //         [Symbol(kHasPrimitive)]: false,
// //         [Symbol(asyncId)]: 18,
// //         [Symbol(triggerId)]: 17,
// //         [Symbol(kAsyncContextFrame)]: undefined
// //       }
// //     },
// //     parser: HTTPParser {
// //       '0': null,
// //       '1': [Function: parserOnHeaders],
// //       '2': [Function: parserOnHeadersComplete],
// //       '3': [Function: parserOnBody],
// //       '4': [Function: parserOnMessageComplete],
// //       '5': [Function: bound onParserExecute],
// //       '6': [Function: bound onParserTimeout],
// //       _headers: [],
// //       _url: '',
// //       socket: [Circular *2],
// //       incoming: [IncomingMessage],
// //       outgoing: null,
// //       maxHeaderPairs: 2000,
// //       _consumed: true,
// //       onIncoming: [Function: bound parserOnIncoming],
// //       joinDuplicateHeaders: null,
// //       [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
// //     },
// //     on: [Function: socketListenerWrap],
// //     addListener: [Function: socketListenerWrap],
// //     prependListener: [Function: socketListenerWrap],
// //     setEncoding: [Function: socketSetEncoding],
// //     _paused: false,
// //     _httpMessage: [Circular *1],
// //     [Symbol(async_id_symbol)]: 20,
// //     [Symbol(kHandle)]: TCP {
// //       reading: true,
// //       onconnection: null,
// //       _consumed: true,
// //       [Symbol(owner_symbol)]: [Circular *2]
// //     },
// //     [Symbol(lastWriteQueueSize)]: 0,
// //     [Symbol(timeout)]: null,
// //     [Symbol(kBuffer)]: null,
// //     [Symbol(kBufferCb)]: null,
// //     [Symbol(kBufferGen)]: null,
// //     [Symbol(shapeMode)]: true,
// //     [Symbol(kCapture)]: false,
// //     [Symbol(kSetNoDelay)]: true,
// //     [Symbol(kSetKeepAlive)]: false,
// //     [Symbol(kSetKeepAliveInitialDelay)]: 0,
// //     [Symbol(kBytesRead)]: 0,
// //     [Symbol(kBytesWritten)]: 0
// //   },
// //   [Symbol(kOutHeaders)]: [Object: null prototype] {
// //     'x-powered-by': [ 'X-Powered-By', 'Express' ]
// //   },
// //   [Symbol(errored)]: null,
// //   [Symbol(kHighWaterMark)]: 16384,
// //   [Symbol(kRejectNonStandardBodyWrites)]: false,
// //   [Symbol(kUniqueHeaders)]: null
// // }

// //  */
// res.send("this is our first basic fullstack in mern");


// });

// // let try another route 

// app.get("/about", (req, res) => {
//     res.send("this is about page");
// })
// app.listen(port , () => {
//     console.log(`Example app listening on port ${port}`)
// });

// // console.log(express);

// // output 
// /*
// our first basic fullstack in mern
// [Function: createApplication] {
//   application: {
//     init: [Function: init],
//     defaultConfiguration: [Function: defaultConfiguration],
//     handle: [Function: handle],
//     use: [Function: use],
//     route: [Function: route],
//     engine: [Function: engine],
//     param: [Function: param],
//     set: [Function: set],
//     path: [Function: path],
//     enabled: [Function: enabled],
//     disabled: [Function: disabled],
//     enable: [Function: enable],
//     disable: [Function: disable],
//     acl: [Function (anonymous)],
//     bind: [Function (anonymous)],
//     checkout: [Function (anonymous)],
//     connect: [Function (anonymous)],
//     copy: [Function (anonymous)],
//     delete: [Function (anonymous)],
//     get: [Function (anonymous)],
//     head: [Function (anonymous)],
//     link: [Function (anonymous)],
//     lock: [Function (anonymous)],
//     'm-search': [Function (anonymous)],
//     merge: [Function (anonymous)],
//     mkactivity: [Function (anonymous)],
//     mkcalendar: [Function (anonymous)],
//     mkcol: [Function (anonymous)],
//     move: [Function (anonymous)],
//     notify: [Function (anonymous)],
//     options: [Function (anonymous)],
//     patch: [Function (anonymous)],
//     post: [Function (anonymous)],
//     propfind: [Function (anonymous)],
//     proppatch: [Function (anonymous)],
//     purge: [Function (anonymous)],
//     put: [Function (anonymous)],
//     query: [Function (anonymous)],
//     rebind: [Function (anonymous)],
//     report: [Function (anonymous)],
//     search: [Function (anonymous)],
//     source: [Function (anonymous)],
//     subscribe: [Function (anonymous)],
//     trace: [Function (anonymous)],
//     unbind: [Function (anonymous)],
//     unlink: [Function (anonymous)],
//     unlock: [Function (anonymous)],
//     unsubscribe: [Function (anonymous)],
//     all: [Function: all],
//     render: [Function: render],
//     listen: [Function: listen]
//   },
//   request: IncomingMessage {
//     header: [Function: header],
//     get: [Function: header],
//     accepts: [Function (anonymous)],
//     acceptsEncodings: [Function (anonymous)],
//     acceptsCharsets: [Function (anonymous)],
//     acceptsLanguages: [Function (anonymous)],
//     range: [Function: range],
//     query: [Getter],
//     is: [Function: is],
//     protocol: [Getter],
//     secure: [Getter],
//     ip: [Getter],
//     ips: [Getter],
//     subdomains: [Getter],
//     path: [Getter],
//     host: [Getter],
//     hostname: [Getter],
//     fresh: [Getter],
//     stale: [Getter],
//     xhr: [Getter]
//   },
//   response: ServerResponse {
//     status: [Function: status],
//     links: [Function (anonymous)],
//     send: [Function: send],
//     json: [Function: json],
//     jsonp: [Function: jsonp],
//     sendStatus: [Function: sendStatus],
//     sendFile: [Function: sendFile],
//     download: [Function: download],
//     type: [Function: contentType],
//     contentType: [Function: contentType],
//     format: [Function (anonymous)],
//     attachment: [Function: attachment],
//     append: [Function: append],
//     header: [Function: header],
//     set: [Function: header],
//     get: [Function (anonymous)],
//     clearCookie: [Function: clearCookie],
//     cookie: [Function (anonymous)],
//     location: [Function: location],
//     redirect: [Function: redirect],
//     vary: [Function (anonymous)],
//     render: [Function: render]
//   },
//   Route: [Function: Route],
//   Router: [Function: Router] { Route: [Function: Route] },
//   json: [Function: json],
//   raw: [Function: raw],
//   static: [Function: serveStatic],
//   text: [Function: text],
//   urlencoded: [Function: urlencoded]
// }
// Example app listening on port 3000
// */

// /////////////////////============///////////////////////////////////////////////
// // step 2 :  you see everytime we hit url it give repsonse  but again hitting not listening by the app it means we instead of " npm run dev everytime " we want something monitor and listen whenever hit the url 
// // for that install nodemon for development because on deployment you dont have to explicitely listen it provided by server where you  are hosting your web app
// after installation make sure in start or dev script in package.json have like 
 //"nodemon index.js" instead "node index.js"

// // step 3 : some data  is sensitive we dont want to share or evern open to people or able to hack or misuse or just do something with our credentials so we have to make it secrect that why  we need envirment variable what are they see readme , 
// // create .env file in current project and  package which helps in import that package from dotenv since express cant do itself
// // examples  like your jwt secret later we will see  or here port we are using  
// also need to mention in  .gitignore file since it sensitive and if you  want what actually goning on in .dotenv the  you make .env.sample or anything else 


// note : we use dotenv and nodemon as devdenpendiecs what is that see readme ...
// basic git   -g is global socope  so install one time and use in any project 
//              npm i package_name is same as npm install package_name 

//////////////////==========================///////////////////////////
import express from  "express";
import dotenv from "dotenv";

dotenv.config();


const app = express();


app.get("/", (req, res) => {
    res.send("this is our first basic fullstack in mern");
})

app.get('/about', (req, res) => {
    res.send("<h1>about page</h1>");
})

app.listen(process.env.PORT, () => {
    console.log("=================process==========",process);
    console.log(`Example app listening on port ${process.env.PORT}`)
})


// output :
// [nodemon] restarting due to changes...
// [nodemon] starting `node index.js`
// [dotenv@17.2.1] injecting env (1) from .env -- tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' }
// =================process========== process {
//   version: 'v23.1.0',
//   versions: {
//     node: '23.1.0',
//     acorn: '8.12.1',
//     ada: '2.9.2',
//     amaro: '0.1.9',
//     ares: '1.34.2',
//     brotli: '1.1.0',
//     cjs_module_lexer: '1.4.1',
//     cldr: '45.0',
//     icu: '75.1',
//     llhttp: '9.2.1',
//     modules: '131',
//     napi: '9',
//     nbytes: '0.1.1',
//     ncrypto: '0.0.1',
//     nghttp2: '1.63.0',
//     nghttp3: '0.7.0',
//     ngtcp2: '1.3.0',
//     openssl: '3.0.15+quic',
//     simdjson: '3.10.0',
//     simdutf: '5.6.0',
//     sqlite: '3.46.1',
//     tz: '2024b',
//     undici: '6.20.0',
//     unicode: '15.1',
//     uv: '1.49.1',
//     uvwasi: '0.0.21',
//     v8: '12.9.202.28-node.11',
//     zlib: '1.3.0.1-motley-71660e1'
//   },
//   arch: 'x64',
//   platform: 'win32',
//   release: {
//     name: 'node',
//     sourceUrl: 'https://nodejs.org/download/release/v23.1.0/node-v23.1.0.tar.gz',
//     headersUrl: 'https://nodejs.org/download/release/v23.1.0/node-v23.1.0-headers.tar.gz',
//     libUrl: 'https://nodejs.org/download/release/v23.1.0/win-x64/node.lib'
//   },
//   _rawDebug: [Function: _rawDebug],
//   moduleLoadList: [
//     'Internal Binding builtins',
//     'Internal Binding module_wrap',
//     'Internal Binding errors',
//     'NativeModule internal/assert',
//     'Internal Binding util',
//     'NativeModule internal/errors',
//     'Internal Binding config',
//     'Internal Binding timers',
//     'Internal Binding async_wrap',
//     'Internal Binding task_queue',
//     'Internal Binding symbols',
//     'NativeModule internal/async_hooks',
//     'Internal Binding constants',
//     'Internal Binding types',
//     'Internal Binding options',
//     'NativeModule internal/options',
//     'Internal Binding string_decoder',
//     'NativeModule internal/util',
//     'NativeModule internal/util/types',
//     'NativeModule internal/validators',
//     'NativeModule internal/linkedlist',
//     'NativeModule internal/priority_queue',
//     'Internal Binding icu',
//     'NativeModule internal/util/inspect',
//     'NativeModule internal/constants',
//     'Internal Binding trace_events',
//     'NativeModule internal/util/debuglog',
//     'Internal Binding async_context_frame',
//     'NativeModule internal/async_context_frame',
//     'NativeModule internal/timers',
//     'NativeModule internal/events/abort_listener',
//     'NativeModule events',
//     'Internal Binding buffer',
//     'NativeModule internal/buffer',
//     'NativeModule buffer',
//     'NativeModule internal/webidl',
//     'Internal Binding messaging',
//     'NativeModule internal/worker/js_transferable',
//     'Internal Binding process_methods',
//     'NativeModule internal/process/per_thread',
//     'Internal Binding credentials',
//     'NativeModule internal/process/promises',
//     'NativeModule internal/fixed_queue',
//     'NativeModule async_hooks',
//     'NativeModule internal/process/task_queues',
//     'NativeModule timers',
//     'NativeModule path',
//     'NativeModule internal/querystring',
//     'NativeModule querystring',
//     'Internal Binding url',
//     'NativeModule internal/url',
//     'Internal Binding contextify',
//     'NativeModule internal/vm',
//     'NativeModule internal/process/execution',
//     'NativeModule internal/process/warning',
//     'NativeModule internal/source_map/source_map_cache',
//     'Internal Binding fs',
//     'Internal Binding blob',
//     'Internal Binding encoding_binding',
//     'NativeModule internal/encoding',
//     'NativeModule internal/streams/utils',
//     'NativeModule util',
//     'NativeModule internal/webstreams/util',
//     'NativeModule internal/webstreams/queuingstrategies',
//     'NativeModule internal/blob',
//     'NativeModule internal/fs/utils',
//     'Internal Binding permission',
//     'NativeModule internal/process/permission',
//     'NativeModule fs',
//     'Internal Binding modules',
//     'NativeModule internal/modules/helpers',
//     'NativeModule internal/console/constructor',
//     'NativeModule internal/console/global',
//     'NativeModule internal/util/inspector',
//     'Internal Binding inspector',
//     'Internal Binding performance',
//     'NativeModule internal/perf/utils',
//     'NativeModule internal/event_target',
//     'Internal Binding wasm_web_api',
//     'Internal Binding mksnapshot',
//     'NativeModule internal/v8/startup_snapshot',
//     'NativeModule internal/process/signal',
//     'NativeModule url',
//     'NativeModule internal/modules/package_json_reader',
//     'NativeModule diagnostics_channel',
//     'NativeModule internal/modules/cjs/loader',
//     'NativeModule internal/process/pre_execution',
//     'NativeModule internal/modules/esm/utils',
//     'NativeModule internal/inspector_async_hook',
//     'Internal Binding worker',
//     'NativeModule internal/modules/run_main',
//     'NativeModule internal/net',
//     'NativeModule internal/dns/utils',
//     'Internal Binding pipe_wrap',
//     'NativeModule internal/abort_controller',
//     'NativeModule internal/streams/end-of-stream',
//     'NativeModule internal/streams/destroy',
//     'NativeModule internal/streams/legacy',
//     'NativeModule internal/streams/add-abort-signal',
//     'NativeModule internal/streams/state',
//     ... 103 more items
//   ],
//   binding: [Function: binding],
//   _linkedBinding: [Function: _linkedBinding],
//   _events: [Object: null prototype] {
//     newListener: [
//       [Function (anonymous)],
//       [Function: startListeningIfSignal],
//       [Function (anonymous)],
//       [Function: onNewListener]
//     ],
//     removeListener: [
//       [Function (anonymous)],
//       [Function: stopListeningIfSignal],
//       [Function: onRemoveListener]
//     ],
//     warning: [Function: onWarning],
//     internalMessage: [Function (anonymous)],
//     SIGWINCH: [
//       [Function: refreshStderrOnSigWinch],
//       [Function: refreshStdoutOnSigWinch]
//     ]
//   },
//   _eventsCount: 5,
//   _maxListeners: undefined,
//   domain: null,
//   _exiting: [Getter/Setter],
//   exitCode: [Getter/Setter],
//   config: {
//     target_defaults: {
//       cflags: [],
//       configurations: [Object],
//       default_configuration: 'Release',
//       defines: [Array],
//       include_dirs: [],
//       libraries: []
//     },
//     variables: {
//       asan: 0,
//       clang: 0,
//       coverage: false,
//       dcheck_always_on: 0,
//       debug_nghttp2: false,
//       debug_node: false,
//       enable_lto: false,
//       enable_pgo_generate: false,
//       enable_pgo_use: false,
//       error_on_warn: false,
//       force_dynamic_crt: 0,
//       host_arch: 'x64',
//       icu_data_in: '..\\..\\deps\\icu-tmp\\icudt75l.dat',
//       icu_endianness: 'l',
//       icu_gyp_path: 'tools/icu/icu-generic.gyp',
//       icu_path: 'deps/icu-small',
//       icu_small: false,
//       icu_ver_major: '75',
//       libdir: 'lib',
//       llvm_version: '0.0',
//       napi_build_version: '9',
//       nasm_version: '2.16',
//       node_builtin_shareable_builtins: [Array],
//       node_byteorder: 'little',
//       node_debug_lib: false,
//       node_enable_d8: false,
//       node_enable_v8_vtunejit: false,
//       node_fipsinstall: false,
//       node_install_corepack: true,
//       node_install_npm: true,
//       node_library_files: [Array],
//       node_module_version: 131,
//       node_no_browser_globals: false,
//       node_prefix: '\\usr\\local',
//       node_release_urlbase: 'https://nodejs.org/download/release/',
//       node_shared: false,
//       node_shared_ada: false,
//       node_shared_brotli: false,
//       node_shared_cares: false,
//       node_shared_http_parser: false,
//       node_shared_libuv: false,
//       node_shared_nghttp2: false,
//       node_shared_nghttp3: false,
//       node_shared_ngtcp2: false,
//       node_shared_openssl: false,
//       node_shared_simdjson: false,
//       node_shared_simdutf: false,
//       node_shared_sqlite: false,
//       node_shared_uvwasi: false,
//       node_shared_zlib: false,
//       node_tag: '',
//       node_target_type: 'executable',
//       node_use_amaro: true,
//       node_use_bundled_v8: true,
//       node_use_node_code_cache: true,
//       node_use_node_snapshot: true,
//       node_use_openssl: true,
//       node_use_v8_platform: true,
//       node_with_ltcg: true,
//       node_without_node_options: false,
//       node_write_snapshot_as_array_literals: true,
//       openssl_is_fips: false,
//       openssl_quic: true,
//       ossfuzz: false,
//       shlib_suffix: 'so.131',
//       single_executable_application: true,
//       target_arch: 'x64',
//       ubsan: 0,
//       use_prefix_to_find_headers: false,
//       v8_enable_31bit_smis_on_64bit_arch: 0,
//       v8_enable_extensible_ro_snapshot: 0,
//       v8_enable_gdbjit: 0,
//       v8_enable_hugepage: 0,
//       v8_enable_i18n_support: 1,
//       v8_enable_inspector: 1,
//       v8_enable_javascript_promise_hooks: 1,
//       v8_enable_lite_mode: 0,
//       v8_enable_maglev: 1,
//       v8_enable_object_print: 1,
//       v8_enable_pointer_compression: 0,
//       v8_enable_sandbox: 0,
//       v8_enable_shared_ro_heap: 1,
//       v8_enable_short_builtin_calls: 1,
//       v8_enable_webassembly: 1,
//       v8_optimized_debug: 1,
//       v8_promise_internal_field_count: 1,
//       v8_random_seed: 0,
//       v8_trace_maps: 0,
//       v8_use_siphash: 1,
//       want_separate_host_toolset: 0
//     }
//   },
//   dlopen: [Function: dlopen],
//   uptime: [Function: uptime],
//   _getActiveRequests: [Function: _getActiveRequests],
//   _getActiveHandles: [Function: _getActiveHandles],
//   getActiveResourcesInfo: [Function: getActiveResourcesInfo],
//   reallyExit: [Function: reallyExit],
//   _kill: [Function: _kill],
//   loadEnvFile: [Function: loadEnvFile],
//   cpuUsage: [Function: cpuUsage],
//   resourceUsage: [Function: resourceUsage],
//   memoryUsage: [Function: memoryUsage] { rss: [Function: rss] },
//   constrainedMemory: [Function: constrainedMemory],
//   availableMemory: [Function: availableMemory],
//   kill: [Function: kill],
//   exit: [Function: exit],
//   finalization: [Getter/Setter],
//   hrtime: [Function: hrtime] { bigint: [Function: hrtimeBigInt] },
//   openStdin: [Function (anonymous)],
//   allowedNodeEnvironmentFlags: [Getter/Setter],
//   features: {
//     inspector: true,
//     debug: false,
//     uv: true,
//     ipv6: true,
//     tls_alpn: true,
//     tls_sni: true,
//     tls_ocsp: true,
//     tls: true,
//     cached_builtins: [Getter],
//     require_module: [Getter],
//     typescript: [Getter]
//   },
//   _fatalException: [Function (anonymous)],
//   setUncaughtExceptionCaptureCallback: [Function: setUncaughtExceptionCaptureCallback],
//   hasUncaughtExceptionCaptureCallback: [Function: hasUncaughtExceptionCaptureCallback],
//   emitWarning: [Function: emitWarning],
//   nextTick: [Function: nextTick],
//   _tickCallback: [Function: runNextTicks],
//   sourceMapsEnabled: [Getter],
//   setSourceMapsEnabled: [Function: setSourceMapsEnabled],
//   getBuiltinModule: [Function: getBuiltinModule],
//   _debugProcess: [Function: _debugProcess],
//   _debugEnd: [Function: _debugEnd],
//   _startProfilerIdleNotifier: [Function (anonymous)],
//   _stopProfilerIdleNotifier: [Function (anonymous)],
//   stdout: [Getter],
//   stdin: [Getter],
//   stderr: [Getter],
//   abort: [Function: abort],
//   umask: [Function: wrappedUmask],
//   chdir: [Function: wrappedChdir],
//   cwd: [Function: wrappedCwd],
//   env: {
//     ALLUSERSPROFILE: 'C:\\ProgramData',
//     ANDROID_SDK_HOME: 'C:\\Android',
//     APPDATA: 'C:\\Users\\kushk\\AppData\\Roaming',
//     AutInstLog: 'C:\\ProgramData\\Siemens\\Automation\\Logfiles\\Setup\\',
//     ChocolateyInstall: 'C:\\ProgramData\\chocolatey',
//     ChocolateyLastPathUpdate: '133865904031111319',
//     CHROME_CRASHPAD_PIPE_NAME: '\\\\.\\pipe\\crashpad_2612_JUZKEAZUFWDEAXBN',
//     COLOR: '1',
//     COLORTERM: 'truecolor',
//     CommonProgramFiles: 'C:\\Program Files\\Common Files',
//     'CommonProgramFiles(x86)': 'C:\\Program Files (x86)\\Common Files',
//     CommonProgramW6432: 'C:\\Program Files\\Common Files',
//     COMPUTERNAME: 'KUSHKUMAR108',
//     ComSpec: 'C:\\WINDOWS\\system32\\cmd.exe',
//     DriverData: 'C:\\Windows\\System32\\Drivers\\DriverData',
//     EDITOR: 'C:\\WINDOWS\\notepad.exe',
//     EFC_11408_1592913036: '1',
//     FPS_BROWSER_APP_PROFILE_STRING: 'Internet Explorer',
//     FPS_BROWSER_USER_PROFILE_STRING: 'Default',
//     GIT_ASKPASS: 'c:\\Users\\kushk\\AppData\\Local\\Programs\\Windsurf\\resources\\app\\extensions\\git\\dist\\askpass.sh',
//     HOME: 'C:\\Users\\kushk',
//     HOMEDRIVE: 'C:',
//     HOMEPATH: '\\Users\\kushk',
//     INIT_CWD: 'C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\day_002',
//     'IntelliJ IDEA Community Edition': 'C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2024.1.4\\bin;',     
//     JAVA_HOME: 'C:\\Program Files\\Microsoft\\jdk-17.0.14.7-hotspot\\',
//     LANG: 'en_US.UTF-8',
//     LOCALAPPDATA: 'C:\\Users\\kushk\\AppData\\Local',
//     LOGONSERVER: '\\\\KUSHKUMAR108',
//     NODE: 'C:\\Program Files\\nodejs\\node.exe',
//     npm_command: 'run',
//     npm_config_cache: 'C:\\Users\\kushk\\AppData\\Local\\npm-cache',
//     npm_config_globalconfig: 'C:\\Users\\kushk\\AppData\\Roaming\\npm\\etc\\npmrc',
//     npm_config_global_prefix: 'C:\\Users\\kushk\\AppData\\Roaming\\npm',
//     npm_config_init_module: 'C:\\Users\\kushk\\.npm-init.js',
//     npm_config_local_prefix: 'C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\day_002',
//     npm_config_node_gyp: 'C:\\Users\\kushk\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js',
//     npm_config_noproxy: '',
//     npm_config_npm_version: '11.5.1',
//     npm_config_prefix: 'C:\\Users\\kushk\\AppData\\Roaming\\npm',
//     npm_config_userconfig: 'C:\\Users\\kushk\\.npmrc',
//     npm_config_user_agent: 'npm/11.5.1 node/v23.1.0 win32 x64 workspaces/false',
//     npm_execpath: 'C:\\Users\\kushk\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js',
//     npm_lifecycle_event: 'dev',
//     npm_lifecycle_script: 'nodemon index.js',
//     npm_node_execpath: 'C:\\Program Files\\nodejs\\node.exe',
//     npm_package_json: 'C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\day_002\\package.json',
//     npm_package_name: 'just_to_overview',
//     npm_package_version: '1.0.0',
//     NUMBER_OF_PROCESSORS: '4',
//     OneDrive: 'C:\\Users\\kushk\\OneDrive',
//     OneDriveConsumer: 'C:\\Users\\kushk\\OneDrive',
//     ORIGINAL_XDG_CURRENT_DESKTOP: 'undefined',
//     OS: 'Windows_NT',
//     Path: 'C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\day_002\\node_modules\\.bin;C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\node_modules\\.bin;C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\node_modules\\.bin;C:\\Users\\kushk\\OneDrive\\Desktop\\node_modules\\.bin;C:\\Users\\kushk\\OneDrive\\node_modules\\.bin;C:\\Users\\kushk\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Users\\kushk\\AppData\\Roaming\\npm\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files\\WindowsApps\\Microsoft.PowerShell_7.5.2.0_x64__8wekyb3d8bbwe;C:\\Program Files\\Microsoft\\jdk-17.0.14.7-hotspot\\bin;C:\\Program Files (x86)\\Siemens\\Automation\\SCADA-RT_V11\\WinCC\\Bin;C:\\Program Files\\Common Files\\Siemens\\Automation\\Simatic OAM\\bin;C:\\Program Files (x86)\\Common Files\\Siemens\\Bin;C:\\Program Files (x86)\\Common Files\\Siemens\\CommonArchiving;C:\\Program Files (x86)\\Common Files\\Siemens\\ACE\\Bin;C:\\Program Files (x86)\\Common Files\\Siemens\\Sqlany;C:\\Program Files (x86)\\Siemens\\Step7\\S7bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Android;C:\\Windows\\System32;C:\\Program Files\\PKWARE\\pkzipc;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files (x86)\\Siemens\\Automation\\SCADA-RT_V11\\WinCC\\Interfaces;C:\\Program Files (x86)\\Common Files\\Siemens\\;C:\\Program Files (x86)\\Common Files\\Siemens\\Interfaces;C:\\Program Files (x86)\\Common Files\\Siemens\\ACE\\Interfaces;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\dotnet\\;C:\\MinGW\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\starship\\bin\\;C:\\Program Files\\MongoDB\\Server\\8.0\\bin;;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\GitHub CLI\\;C:\\Program Files\\MySQL\\MySQL Shell 8.0\\bin\\;C:\\Users\\kushk\\AppData\\Local\\Programs\\Python\\Python313\\Scripts\\;C:\\Users\\kushk\\AppData\\Local\\Programs\\Python\\Python313\\;C:\\Users\\kushk\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\;C:\\Users\\kushk\\AppData\\Local\\Programs\\Python\\Python312\\;C:\\Users\\kushk\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2024.1.4\\bin;;C:\\Users\\kushk\\AppData\\Roaming\\npm;C:\\Program Files\\JetBrains\\WebStorm 2024.3.2\\bin;;C:\\Users\\kushk\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\msys64\\ucrt64\\bin;C:\\Users\\kushk\\AppData\\Local\\Programs\\cursor\\resources\\app\\bin;C:\\Users\\kushk\\AppData\\Local\\Programs\\Windsurf\\bin;C:\\Users\\kushk\\.bun\\bin;C:\\Program Files\\Microsoft\\jdk-17.0.14.7-hotspot\\bin;C:\\Program Files (x86)\\Siemens\\Automation\\SCADA-RT_V11\\WinCC\\Bin;C:\\Program Files\\Common Files\\Siemens\\Automation\\Simatic OAM\\bin;C:\\Program Files (x86)\\Common Files\\Siemens\\Bin;C:\\Program Files (x86)\\Common Files\\Siemens\\CommonArchiving;C:\\Program Files (x86)\\Common Files\\Siemens\\ACE\\Bin;C:\\Program Files (x86)\\Common Files\\Siemens\\Sqlany;C:\\Program Files (x86)\\Siemens\\Step7\\S7bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Android;C:\\Windows\\System32;C:\\Program Files\\PKWARE\\pkzipc;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files (x86)\\Siemens\\Automation\\SCADA-RT_V11\\WinCC\\Interfaces;C:\\Program Files (x86)\\Common Files\\Siemens\\;C:\\Program Files (x86)\\Common Files\\Siemens\\Interfaces;C:\\Program Files (x86)\\Common Files\\Siemens\\ACE\\Interfaces;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\dotnet\\;C:\\MinGW\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\starship\\bin\\;C:\\Program Files\\MongoDB\\Server\\8.0\\bin;;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\GitHub CLI\\;C:\\PROGRA~2\\MELSOFT\\ACT\\Control;',
//     PATHEXT: '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL',
//     PORT: '3000',
//     PROCESSOR_ARCHITECTURE: 'AMD64',
//     PROCESSOR_IDENTIFIER: 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel',
//     PROCESSOR_LEVEL: '6',
//     PROCESSOR_REVISION: '8c01',
//     ProgramData: 'C:\\ProgramData',
//     ProgramFiles: 'C:\\Program Files',
//     'ProgramFiles(x86)': 'C:\\Program Files (x86)',
//     ProgramW6432: 'C:\\Program Files',
//     PROMPT: '$P$G',
//     PSModulePath: 'C:\\Users\\kushk\\OneDrive\\Documents\\PowerShell\\Modules;C:\\Program Files\\PowerShell\\Modules;c:\\program files\\windowsapps\\microsoft.powershell_7.5.2.0_x64__8wekyb3d8bbwe\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\Tools\\PowerShell\\Modules\\',
//     PUBLIC: 'C:\\Users\\Public',
//     S7TMP: 'C:\\Program Files (x86)\\Siemens\\Step7\\S7Tmp',
//     SESSIONNAME: 'Console',
//     Simatic_OAM: 'C:\\Program Files\\Common Files\\Siemens\\Automation\\Simatic OAM',
//     Simatic_OAM_DATA: 'C:\\ProgramData\\Siemens\\Automation\\Simatic OAM',
//     SQLANY: 'C:\\Program Files (x86)\\Common Files\\Siemens\\Sqlany',
//     SystemDrive: 'C:',
//     SystemFolder_Omron: 'C:\\Windows\\SysWOW64\\Omron\\',
//     SystemRoot: 'C:\\WINDOWS',
//     TEMP: 'C:\\Users\\kushk\\AppData\\Local\\Temp',
//     TERM_PROGRAM: 'vscode',
//     TERM_PROGRAM_VERSION: '1.99.3',
//     TMP: 'C:\\Users\\kushk\\AppData\\Local\\Temp',
//     USERDOMAIN: 'KUSHKUMAR108',
//     USERDOMAIN_ROAMINGPROFILE: 'KUSHKUMAR108',
//     USERNAME: 'kushk',
//     USERPROFILE: 'C:\\Users\\kushk',
//     VSCODE_GIT_ASKPASS_EXTRA_ARGS: '',
//     VSCODE_GIT_ASKPASS_MAIN: 'c:\\Users\\kushk\\AppData\\Local\\Programs\\Windsurf\\resources\\app\\extensions\\git\\dist\\askpass-main.js',
//     VSCODE_GIT_ASKPASS_NODE: 'C:\\Users\\kushk\\AppData\\Local\\Programs\\Windsurf\\Windsurf.exe',
//     VSCODE_GIT_IPC_HANDLE: '\\\\.\\pipe\\vscode-git-409c5166c5-sock',
//     VSCODE_INJECTION: '1',
//     WebStorm: 'C:\\Program Files\\JetBrains\\WebStorm 2024.3.2\\bin;',
//     windir: 'C:\\WINDOWS',
//     ZES_ENABLE_SYSMAN: '1',
//     __PSLockDownPolicy: '0'
//   },
//   title: 'C:\\WINDOWS\\system32\\cmd.exe ',
//   argv: [
//     'C:\\Program Files\\nodejs\\node.exe',
//     'C:\\Users\\kushk\\OneDrive\\Desktop\\DSA AND DEV\\MERN-BACKEND\\day_002\\index.js'
//   ],
//   execArgv: [],
//   pid: 9640,
//   ppid: 14788,
//   execPath: 'C:\\Program Files\\nodejs\\node.exe',
//   debugPort: 9229,
//   argv0: 'C:\\Program Files\\nodejs\\node.exe',
//   _preload_modules: [],
//   report: [Getter],
//   channel: Control {
//     _events: [Object: null prototype] {},
//     _eventsCount: 0,
//     _maxListeners: undefined,
//     [Symbol(shapeMode)]: false,
//     [Symbol(kCapture)]: false,
//     [Symbol(kPendingMessages)]: []
//   },
//   _handleQueue: null,
//   _pendingMessage: null,
//   send: [Function (anonymous)],
//   _send: [Function (anonymous)],
//   connected: true,
//   disconnect: [Function (anonymous)],
//   _disconnect: [Function (anonymous)],
//   [Symbol(shapeMode)]: false,
//   [Symbol(kCapture)]: false,
//   [Symbol(kChannelHandle)]: Pipe {
//     pendingHandle: null,
//     sockets: { got: {}, send: {} },
//     [Symbol(kJSONBuffer)]: '',
//     [Symbol(kStringDecoder)]: undefined
//   }
// }
// Example app listening on port 3000




/// ============ ///================///


// aditinal things that you should know  that we  are working with es module ,but we have commone js too see module type what is that what is the diff .. see readme .in detailed .
// it is very helpful you know basic git and github  
